name: 🚀 Build and Deploy Jimmy AI Generator

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: jimmy-ai-generator
  REGISTRY: ghcr.io

jobs:
  lint-and-test:
    name: 🔍 Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g html-validate jshint prettier

      - name: Lint HTML
        run: html-validate app/index.html

      - name: Lint JavaScript
        run: jshint app/app.js --config .jshintrc || true

      - name: Format check
        run: |
          prettier --check ""app/**/*.{html,css,js}"" || true

      - name: Test Docker build
        run: docker build -t test-build .

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: 🏗️ Build & Push Docker
    needs: [lint-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  deploy-production:
    name: 🚀 Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to Portainer
        run: |
          echo ""🚀 Déploiement vers Portainer...""
          curl -X POST ""${{ secrets.PORTAINER_WEBHOOK_URL }}"" \
            -H ""Content-Type: application/json"" \
            -d '{
              ""tag"": ""latest"",
              ""image"": ""${{ needs.build-and-push.outputs.image-tag }}"",
              ""digest"": ""${{ needs.build-and-push.outputs.image-digest }}""
            }'
          echo ""✅ Déploiement terminé""

      - name: Notification Success
        if: success()
        run: |
          echo ""🎉 Déploiement réussi de Jimmy AI Generator v3.0""
          # Ici vous pourriez ajouter une notification Slack, email, etc.

      - name: Notification Failure  
        if: failure()
        run: |
          echo ""❌ Échec du déploiement""
          # Notification d'échec

  create-release:
    name: 📦 Create Release
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        run: |
          echo ""## 🚀 Version ${{ github.ref_name }}"" > RELEASE_NOTES.md
          echo """" >> RELEASE_NOTES.md
          echo ""### ✨ Nouveautés"" >> RELEASE_NOTES.md
          echo ""- Générateur IA adaptatif"" >> RELEASE_NOTES.md
          echo ""- Apprentissage automatique"" >> RELEASE_NOTES.md
          echo ""- Interface utilisateur améliorée"" >> RELEASE_NOTES.md
          echo """" >> RELEASE_NOTES.md
          echo ""### 🐛 Corrections"" >> RELEASE_NOTES.md
          echo ""- Optimisations de performance"" >> RELEASE_NOTES.md
          echo ""- Corrections de sécurité"" >> RELEASE_NOTES.md

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Jimmy AI Generator ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
